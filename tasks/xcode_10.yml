---
- name: test whether xcode was uploaded earlier
  stat: path=/Users/{{ ansible_ssh_user }}/{{ xcode_src }}
  register: xcode_dl_path

- name: upload xcode
  copy: src={{ xcode_src }} dest=/Users/{{ ansible_ssh_user }}
  when: xcode_dl_path.stat.exists == False

- name: check that the xcode archive is valid
  command: "pkgutil --check-signature {{ xcode_src }} | grep \"Status: signed Apple Software\""

- name: extract the xcode archive in place
  extract_xip:
    src: "/Users/{{ ansible_ssh_user }}/{{ xcode_src }}"
    dest: "/Applications"
  become: yes

- name: accept license agreement
  command: /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -license accept
  become: yes
  become_method: sudo

- name: install additional xcode components
  command: installer -pkg /Applications/Xcode.app/Contents/Resources/Packages/XcodeSystemResources.pkg -target /
  become: yes
  become_method: sudo

- name: install mobile device development package
  command: installer -pkg /Applications/Xcode.app/Contents/Resources/Packages/MobileDeviceDevelopment.pkg -target /
  become: yes
  become_method: sudo

- name: xcode run first launch
  command: xcodebuild -runFirstLaunch
  become: yes
  become_method: sudo

- name: check on the status of developer mode
  command: DevToolsSecurity -status
  become: yes
  become_method: sudo
  register: dev_tools_security_status

- name: enable developer mode
  command: DevToolsSecurity -enable
  become: yes
  become_method: sudo
  when: "'disabled' in dev_tools_security_status.stdout"
